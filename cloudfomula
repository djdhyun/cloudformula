#!/bin/bash
set -e

# envs
AWS=${AWS:-aws}
AWS_REGION=${AWS_REGION:-${AWS_DEFAULT_REGION}}
AWS_REGION=${AWS_REGION:-$($AWS configure get region)}

case "$OSTYPE" in
  linux-gnu*) PATH_SEP="/";;
  cygwin*|msys*) PATH_SEP="\\";;
  *) PATH_SEP="/";; # default to Unix-like path separator
esac

function deploy_stacks() {
    if [ $# -lt 1 ]; then
        printf "Usage: deploy_stack [...stacks]\n"
        return 1
    fi

    local _env

    for stack in "$@"
    do
        for PROPERTIES_FILE in "$_stack""$PATH_SEP"*.properties;
        do
            _env=$("$(basename "$PROPERTIES_FILE")" | cut -d. -f1)
            deploy_stack "$_stack" "$_env"
        done
    done

    return 0
}

function arn_stack() {
    filter=${1:-0}
    if [ "$filter" -eq 0 ]; then
        local deletion_filter="''"
    else
        local deletion_filter="'REVIEW_IN_PROGRESS', 'DELETE_COMPLETE', 'CREATE_FAILED'"
    fi

    ret=$($AWS cloudformation list-stacks \
        --no-paginate \
        --query "StackSummaries[?StackName=='$_stack' && !contains([$deletion_filter], StackStatus)].StackId | [0]" \
        --output text || true)

    if [ -z "$ret" ] || [ "$ret" = "None" ]; then
        echo "No active stack for [$_stack]" >&2
        return 1
    fi

    echo "$ret"
}

function url_stack() {
    local url="https://${AWS_REGION}.console.aws.amazon.com"
    url="$url/cloudformation/home?region=${AWS_REGION}#"
    url="$url/stacks/stackInfo"
    url="$url?stackId=$(arn_stack)"

    echo "$url"
}

function arn_changeset() {
    ret=$($AWS cloudformation list-change-sets \
        --stack-name "$_stack" \
        --no-paginate \
        --query "Summaries[?ChangeSetName=='$_changeset'].ChangeSetId | [0]" \
        --output text || true)

    if [ -z "$ret" ] || [ "$ret" = "None" ]; then
        echo "No active changeset for [$_stack]" >&2
        return 1
    fi

    echo "$ret"
}

function url_changeset() {
    local url="https://${AWS_REGION}.console.aws.amazon.com"
    url="$url/cloudformation/home?region=${AWS_REGION}#"
    url="$url/stacks/changesets/changes"
    url="$url?stackId=$(arn_stack)"
    url="$url&changeSetId=$(arn_changeset)"

    echo "$url"
}

function status_changeset() {
    local ret
    local arn=${1:-"$(arn_changeset)"}

    if [ -z "$arn" ]; then
        return 1
    fi

    ret=$($AWS cloudformation describe-change-set \
        --change-set-name "$arn" \
        --no-paginate \
        --query ExecutionStatus \
        --output text)

    if [ -z "$ret" ]; then
        return 1
    elif [[ "$ret" == "UNAVAILABLE" ]]; then
        $AWS cloudformation describe-change-set \
            --change-set-name "$arn" \
            --no-paginate \
            --query StatusReason \
            --output text >&1
        return 1
    else
        echo "$ret"
    fi
}

function describe_changeset() {
    local ret
    local arn

    arn=$(arn_changeset)
    if [ -z "$arn" ]; then
        echo "There's no active changeset for ""$_stack""" >&2
        return 1
    fi

    ret=$($AWS cloudformation describe-change-set \
        --change-set-name "$arn" \
        --no-paginate \
        --query Changes \
        --output json)

    echo "$ret"
}

function pretty_changeset() {
    echo "Cloudformation Stack: [\`$_stack\`]($(url_stack))"
    echo "Cloudformation Changeset: [\`$_changeset\`]($(url_changeset))"
    echo ""
    echo "<details>"
    echo "  <summary>Changeset Detail</summary>"
    echo ""
    echo "\`\`\`json"
    describe_changeset
    echo "\`\`\`"
    echo ""
    echo "</details>"
    echo ""
}

function delete_changeset() {
    local arn
    arn=$(arn_changeset)

    $AWS cloudformation delete-change-set \
        --change-set-name "$arn"
}

function execute_changeset() {
    local ret
    local arn
    arn=$(arn_changeset)

    # If the change set doesn't contain any changes,
    # just generously ends the code by deleting it.
    if [[ "$(describe_changeset)" == "[]" ]]; then
        delete_changeset
        return 0
    fi

    $AWS cloudformation execute-change-set \
        --change-set-name "$arn"

    # Wait until the execution is finished
    for _ in {1..50}; do
        sleep 10
        ret=$(status_changeset "$arn" 2> /dev/null || true)
        if [[ "$ret" == "AVAILABLE" ]]; then
            continue
        elif [[ "$ret" != "EXECUTE_IN_PROGRESS" ]]; then
            break
        elif [ -z "$ret" ]; then
            break
        fi
    done

    if [[ "$ret" == "EXECUTE_COMPLETE" ]]; then
        echo "-- [$_stack] Changeset: $_changeset --"
        echo "Changeset has been successfully applied!!"
        ret=0
    elif [[ "$ret" == "EXECUTE_FAILED" ]]; then
        echo "-- [$_stack] Changeset: $_changeset --" >&2
        echo "Applying the changeset has been failed." >&2
        $AWS cloudformation describe-stack-events \
            --stack-name "$_stack" \
            --query "StackEvents[?ResourceStatus=='UPDATE_FAILED'].ResourceStatusReason | [0]" \
            --output text >&2
        ret=1
    elif [[ "$ret" == "EXECUTE_IN_PROGRESS" ]]; then
        echo "-- [$_stack] Changeset: $_changeset --" >&2
        echo "Applying the changeset is taking too long. Please check it later manually" >&2
        ret=1
    elif [[ "$ret" == "AVAILABLE" ]]; then
        echo "-- [$_stack] Changeset: $_changeset --" >&2
        echo "Applying the changeset is taking too long. Please check it later manually" >&2
        ret=1
    else
        echo "-- [$_stack] Changeset: $_changeset --" >&2
        echo "Applying the changeset ended with an unknown status" >&2
        ret=1
    fi

    return $ret
}

function create_changeset() {
    local ret
    local change_type

    # 1. Check if stack exists
    if [ -z "$(arn_stack 1 2> /dev/null)" ]; then
        change_type="CREATE"
    else
        change_type="UPDATE"
    fi

    # 2. Delete previous change sets if exists
    delete_changeset 2> /dev/null || true

    # 3. Create a change set
    ret=$($AWS cloudformation create-change-set \
        --template-body file://"$_template_file" \
        --parameters file://"$_properties_file" \
        --stack-name "$_stack" \
        --change-set-type "$change_type" \
        --capabilities CAPABILITY_NAMED_IAM \
        --no-paginate \
        --query Id \
        --output text \
        --change-set-name "$_changeset")

    # 4. Wait until change set is ready
    for _ in {1..5}; do
        sleep 5
        ret=$(arn_changeset 2> /dev/null || true)
        if [[ ${#ret} -gt 10 ]]; then
            break
        fi
    done
    if [[ ${#ret} -lt 10 ]]; then
        echo "Retrieving changeset failed after multiple attempts" >&2
        return 1
    fi

    return 0
}

function export_common_vars() {
    if [ $# -lt 3 ]; then
        printf "Usage: %s %s [stack name] [properties name] [changeset_suffix?]\n" "$0" "${1:-[subcommand]}"
        return 1
    fi

    local stack=$2
    local suffix=${4:+"-$4"}

    export _env=$3
    export _changeset="cs-${stack//[\/\\]/-}-$_env$suffix"
    export _template_file="$stack""$PATH_SEP""main.yaml"
    export _properties_file="$stack""$PATH_SEP""$_env.properties"
    export _stack="${stack//[\/\\]/-}-$_env"

    if [ ! -f "$_template_file" ]; then
        echo "$_template_file does not exist."
        return 1
    fi

    if [ ! -f "$_properties_file" ]; then
        echo "$_properties_file does not exist."
        return 1
    fi

    return 0
}

function main {
    local _command=$1
    export_common_vars "$@"

    case "$_command" in
        create_changeset|plan)
            shift 4;
            create_changeset "$@"
            ;;
        delete_changeset|abort)
            shift 4;
            delete_changeset "$@"
            ;;
        describe_changeset|describe)
            shift 4;
            describe_changeset "$@"
            ;;
        pretty_changeset|comment)
            shift 4;
            pretty_changeset "$@"
            ;;
        execute_changeset|apply)
            shift 4;
            execute_changeset "$@"
            ;;
        url_changeset|url)
            shift 4;
            url_changeset "$@"
            ;;
        status_changeset)
            shift 4;
            status_changeset "$@"
            ;;
        arn_changeset|arn)
            shift 4;
            arn_changeset "$@"
            ;;
        deploy_stack)
            shift 3;
            deploy_stack "$@"
            ;;
        arn_stack)
            shift 3;
            arn_stack "$@"
            ;;
        url_stack)
            shift 3;
            url_stack "$@"
            ;;
        *)
            echo "Invalid subcommand: $_command"
            exit 1
            ;;
    esac
}

main "$@"
